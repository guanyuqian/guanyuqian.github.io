(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{618:function(t,e,r){t.exports=r.p+"assets/img/cover.133091d0.png"},793:function(t,e,r){"use strict";r.r(e);var a=r(3),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"}),a("p",[t._v("参考"),a("a",{attrs:{href:"https://www.runoob.com/design-pattern",target:"_blank",rel:"noopener noreferrer"}},[t._v("runoob.com"),a("OutboundLink")],1),t._v("中的设计模式概念来实现，使用Go语言重新实现了一下这些设计模式")])]),t._v(" "),a("p",[a("img",{attrs:{src:r(618),alt:"img"}})]),t._v(" "),a("p",[t._v("设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")]),t._v(" "),a("p",[t._v("设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/guanyuqian/go_design_pattern",target:"_blank",rel:"noopener noreferrer"}},[t._v("实现代码"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("参考"),a("a",{attrs:{href:"https://www.runoob.com/design-pattern",target:"_blank",rel:"noopener noreferrer"}},[t._v("runoob.com"),a("OutboundLink")],1),t._v("中的设计模式概念来实现")]),t._v(" "),a("p",[t._v("使用Go语言重新实现了一下这些设计模式，第一次使用Go编程，会有一些小问题。")]),t._v(" "),a("p",[t._v("使用go test进行测试，在项目目录下运行")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("go "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" ./"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"设计模式的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的类型"}},[t._v("#")]),t._v(" 设计模式的类型")]),t._v(" "),a("p",[t._v("根据设计模式的参考书 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。")]),t._v(" "),a("h3",{attrs:{id:"_1创建型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1创建型模式"}},[t._v("#")]),t._v(" 1\t创建型模式")]),t._v(" "),a("p",[t._v("这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。")]),t._v(" "),a("ul",[a("li",[t._v("工厂模式（Factory Pattern）")]),t._v(" "),a("li",[t._v("抽象工厂模式（Abstract Factory Pattern）")]),t._v(" "),a("li",[t._v("单例模式（Singleton Pattern）")]),t._v(" "),a("li",[t._v("建造者模式（Builder Pattern）")]),t._v(" "),a("li",[t._v("原型模式（Prototype Pattern）")])]),t._v(" "),a("h3",{attrs:{id:"_2结构型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2结构型模式"}},[t._v("#")]),t._v(" 2\t结构型模式")]),t._v(" "),a("p",[t._v("这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。")]),t._v(" "),a("ul",[a("li",[t._v("适配器模式（Adapter Pattern）")]),t._v(" "),a("li",[t._v("桥接模式（Bridge Pattern）")]),t._v(" "),a("li",[t._v("过滤器模式（Filter、Criteria Pattern）")]),t._v(" "),a("li",[t._v("组合模式（Composite Pattern）")]),t._v(" "),a("li",[t._v("装饰器模式（Decorator Pattern）")]),t._v(" "),a("li",[t._v("外观模式（Facade Pattern）")]),t._v(" "),a("li",[t._v("享元模式（Flyweight Pattern）")]),t._v(" "),a("li",[t._v("代理模式（Proxy Pattern）")])]),t._v(" "),a("h3",{attrs:{id:"_3行为型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3行为型模式"}},[t._v("#")]),t._v(" 3\t行为型模式")]),t._v(" "),a("p",[t._v("这些设计模式特别关注对象之间的通信。")]),t._v(" "),a("ul",[a("li",[t._v("责任链模式（Chain of Responsibility Pattern）")]),t._v(" "),a("li",[t._v("命令模式（Command Pattern）")]),t._v(" "),a("li",[t._v("解释器模式（Interpreter Pattern）")]),t._v(" "),a("li",[t._v("迭代器模式（Iterator Pattern）")]),t._v(" "),a("li",[t._v("中介者模式（Mediator Pattern）")]),t._v(" "),a("li",[t._v("备忘录模式（Memento Pattern）")]),t._v(" "),a("li",[t._v("观察者模式（Observer Pattern）")]),t._v(" "),a("li",[t._v("状态模式（State Pattern）")]),t._v(" "),a("li",[t._v("空对象模式（Null Object Pattern）")]),t._v(" "),a("li",[t._v("策略模式（Strategy Pattern）")]),t._v(" "),a("li",[t._v("模板模式（Template Pattern）")]),t._v(" "),a("li",[t._v("访问者模式（Visitor Pattern）")])]),t._v(" "),a("h3",{attrs:{id:"_4j2ee-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4j2ee-模式"}},[t._v("#")]),t._v(" 4\tJ2EE 模式")]),t._v(" "),a("p",[t._v("这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。")]),t._v(" "),a("ul",[a("li",[t._v("MVC 模式（MVC Pattern）")]),t._v(" "),a("li",[t._v("业务代表模式（Business Delegate Pattern）")]),t._v(" "),a("li",[t._v("组合实体模式（Composite Entity Pattern）")]),t._v(" "),a("li",[t._v("数据访问对象模式（Data Access Object Pattern）")]),t._v(" "),a("li",[t._v("前端控制器模式（Front Controller Pattern）")]),t._v(" "),a("li",[t._v("拦截过滤器模式（Intercepting Filter Pattern）")]),t._v(" "),a("li",[t._v("服务定位器模式（Service Locator Pattern）")]),t._v(" "),a("li",[t._v("传输对象模式（Transfer Object Pattern）")])])])}),[],!1,null,null,null);e.default=n.exports}}]);