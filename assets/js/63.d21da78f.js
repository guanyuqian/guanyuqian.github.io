(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{680:function(s,n,a){"use strict";a.r(n);var t=a(3),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"}),a("p",[s._v("给你一个整数 "),a("code",[s._v("n")]),s._v("，请你判断该整数是否是 "),a("code",[s._v("2")]),s._v(" 的幂次方。")])]),s._v(" "),a("h2",{attrs:{id:"题目描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[s._v("#")]),s._v(" 题目描述")]),s._v(" "),a("p",[s._v("给你一个整数 "),a("code",[s._v("n")]),s._v("，请你判断该整数是否是 "),a("code",[s._v("2")]),s._v(" 的幂次方。如果是，返回 "),a("code",[s._v("true")]),s._v(" ；否则，返回 "),a("code",[s._v("false")]),s._v(" 。")]),s._v(" "),a("p",[s._v("如果存在一个整数 "),a("code",[s._v("x")]),s._v(" 使得 "),a("code",[s._v("n == 2^x")]),s._v(" ，则认为 "),a("code",[s._v("n")]),s._v(" 是 "),a("code",[s._v("2")]),s._v(" 的幂次方。")]),s._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/power-of-two/",target:"_blank",rel:"noopener noreferrer"}},[s._v("231. 2 的幂"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("输入：n = 1\n输出：true\n解释：20 = 1\n\n输入：n = 16\n输出：true\n解释：24 = 16\n\n输入：n = 3\n输出：false\n\n输入：n = 4\n输出：true\n\n输入：n = 5\n输出：false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"提示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提示"}},[s._v("#")]),s._v(" 提示")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-2^31 <= n <= 2^31 - 1")])])]),s._v(" "),a("h2",{attrs:{id:"解法-brian-kernighan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解法-brian-kernighan"}},[s._v("#")]),s._v(" 解法：Brian-Kernighan")]),s._v(" "),a("div",{staticClass:"custom-block theorem"},[a("p",{staticClass:"title"},[s._v("Brian Kernighan 算法")]),a("p",[s._v("任何一个数 "),a("code",[s._v("n")]),s._v(" ，"),a("code",[s._v("n & ( n − 1 )")]),s._v("的结果是"),a("code",[s._v("n")]),s._v("的比特位最右端的1变为0的结果。")])]),a("p",[s._v("一个数 "),a("em",[s._v("n")]),s._v(" 是 2 的幂，当且仅当 "),a("em",[s._v("n")]),s._v(" 是正整数，并且 "),a("em",[s._v("n")]),s._v(" 的二进制表示中仅包含 1 个 1。我们可以用Brian Kernighan 算法简化这过程。")]),s._v(" "),a("p",[s._v("实现代码如下。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isPowerOfTwo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);