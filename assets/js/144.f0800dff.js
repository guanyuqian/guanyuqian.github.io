(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{768:function(s,t,a){"use strict";a.r(t);var v=a(3),e=Object(v.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"}),a("p",[s._v("乐观锁、悲观锁、自旋锁、互斥锁、独占锁、共享锁、读锁、写锁、统一锁、分段锁、公平锁、非公平锁、可重入锁、不可重入锁")])]),a("p",[s._v("锁的类型有很多种，在不同的应用场景中同一个名字的锁代表的含义可能完全不同，但是本质上那么多名称的锁只是从不同的角度对锁的特性进行区分和描述罢了，只要能够理解这些名词代表的底层设计思想，就可以快速理解这些五花八门的锁。")]),s._v(" "),a("h2",{attrs:{id:"乐观锁vs悲观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁vs悲观锁"}},[s._v("#")]),s._v(" 乐观锁VS悲观锁")]),s._v(" "),a("p",[a("strong",[s._v("上锁思想")]),s._v("分为乐观锁、悲观锁，在数据库中应用比较明显。")]),s._v(" "),a("ul",[a("li",[s._v("悲观锁：所以每次在操作数据的时候都会上锁")]),s._v(" "),a("li",[s._v("乐观锁：每次操作完后再去判断是否生效，一般使用CAS原理实现")])]),s._v(" "),a("p",[s._v("乐观锁在读比例较大的场景的时候拥有更高的性能，因为悲观锁获取锁需要消耗额外的资源。")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--- 悲观锁， for update。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t_goods "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<>")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--- 乐观锁，利用额外的version字段。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("update")]),s._v(" t_goods "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("version"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("version"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#{id} and version=#{version};")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"互斥锁vs自旋锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#互斥锁vs自旋锁"}},[s._v("#")]),s._v(" 互斥锁VS自旋锁")]),s._v(" "),a("p",[a("strong",[s._v("获取锁失败的行为")]),s._v("不同，分为互斥锁和自旋锁。此处的互斥锁和自旋锁一般特指操作系统中的锁类型。\n权衡两者的性能重点在于互斥锁的「上下文切换」代价和自旋锁忙等占用「计算资源」代价大小。")]),s._v(" "),a("ul",[a("li",[s._v("互斥锁：线程获取锁失败后就阻塞，直到锁被释放后才被唤醒，其中有多次上下文切换的消耗。")]),s._v(" "),a("li",[s._v("自旋锁：线程获取锁失败后会尝试再次获取，直到获取到锁为止。（在底层CPU提供CAS函数保证获取自旋锁尝试获取的原子性）")])]),s._v(" "),a("h2",{attrs:{id:"独占锁-独占锁、排他锁-vs共享锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#独占锁-独占锁、排他锁-vs共享锁"}},[s._v("#")]),s._v(" 独占锁（独占锁、排他锁）VS共享锁")]),s._v(" "),a("p",[a("strong",[s._v("可否同时被不同对象拥有")]),s._v("，分为独占锁和共享锁的两个概念，这里又可以称独占锁为互斥锁、排他锁。")]),s._v(" "),a("ul",[a("li",[s._v("独占锁：独占锁在同一时间点只会被同一对象拥有")]),s._v(" "),a("li",[s._v("共享锁：共享锁在同一时间内可以被多个对象拥有")])]),s._v(" "),a("h2",{attrs:{id:"读锁vs写锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读锁vs写锁"}},[s._v("#")]),s._v(" 读锁VS写锁")]),s._v(" "),a("p",[a("strong",[s._v("获取锁之后的行为")]),s._v("不同，可以将锁分为读锁和写锁。")]),s._v(" "),a("ul",[a("li",[s._v("读锁：获取锁后进行数据读取，不涉及数据改变，因此读锁算是共享锁")]),s._v(" "),a("li",[s._v("写锁：获取写锁进行数据更新，设计数据改变，因此写锁算是排他锁")])]),s._v(" "),a("h2",{attrs:{id:"统一锁vs分段锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统一锁vs分段锁"}},[s._v("#")]),s._v(" 统一锁VS分段锁")]),s._v(" "),a("p",[a("strong",[s._v("加锁的范围")]),s._v("不同，可以分为统一锁和分段锁。")]),s._v(" "),a("ul",[a("li",[s._v("统一锁：在一次系统操作中对整个区域的数据上锁。")]),s._v(" "),a("li",[s._v("分段锁：在一次系统操作中对某部分区域的数据上锁。")])]),s._v(" "),a("p",[s._v("分段锁会明显提升并发的性能，这种设计思想在Java的ConcurrentHashMap中有体现，同样在MySQL的表锁和行锁设计也属于也是这类思想。")]),s._v(" "),a("h2",{attrs:{id:"公平锁vs非公平锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公平锁vs非公平锁"}},[s._v("#")]),s._v(" 公平锁VS非公平锁")]),s._v(" "),a("p",[a("strong",[s._v("分配策略")]),s._v("不同可分为公平锁和非公平锁。")]),s._v(" "),a("ul",[a("li",[s._v("公平锁：公平锁是指多个线程按照申请锁的顺序来获取锁")]),s._v(" "),a("li",[s._v("非公平锁：非公平锁是指多个线程的优先级顺序来获取锁")])]),s._v(" "),a("h2",{attrs:{id:"可重入锁vs不可重入锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可重入锁vs不可重入锁"}},[s._v("#")]),s._v(" 可重入锁VS不可重入锁")]),s._v(" "),a("p",[s._v("是否具有"),a("strong",[s._v("重复获取")]),s._v("这样特征又分为可重入锁和不可重入锁。\n实际上可重入锁只是提供一种独特的编程方式，没有必须使用可重入锁才能够完成的逻辑。")]),s._v(" "),a("h2",{attrs:{id:"golang的锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#golang的锁"}},[s._v("#")]),s._v(" Golang的锁")]),s._v(" "),a("p",[s._v("对于编程语言的锁实现来说")]),s._v(" "),a("ul",[a("li",[s._v("Java的锁机制比较复杂，一共提供了数十种不同类型的锁。")]),s._v(" "),a("li",[s._v("Golang提供的锁机制比较简单，从并发编程的角度触发，分为两种："),a("code",[s._v("sync.Mutex")]),s._v("（独占锁、互斥锁）、"),a("code",[s._v("sync.RWMutex")]),s._v("（共享锁、读写锁）。")])]),s._v(" "),a("p",[s._v("值得一提的是，而"),a("code",[s._v("sync.Mutex")]),s._v("的实现又比较复杂，如果根据我们上述提到的锁特性去描述"),a("code",[s._v("sync.Mutex")]),s._v("的话，就是："),a("code",[s._v("sync.Mutex")]),s._v("从上锁思想属于「悲观锁」，获取锁失败后「互斥锁」和「自旋锁」的行为，结合了「公平锁」和「非公平锁」的分配策略的「不可重入」的「独占锁」。")]),s._v(" "),a("p",[s._v("Golang的"),a("code",[s._v("sync.RWMutex")]),s._v("底层是借助Mutex实现的，所以它具备上述"),a("code",[s._v("sync.Mutex")]),s._v("的特性，但是更贴切属于「读写锁」也就是「共享锁」。")])])}),[],!1,null,null,null);t.default=e.exports}}]);